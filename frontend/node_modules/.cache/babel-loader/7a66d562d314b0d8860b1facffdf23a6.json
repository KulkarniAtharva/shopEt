{"ast":null,"code":"import { PRODUCT_DETAILS_FAILURE, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAILURE, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/ProductConstants\";\nimport axios from \"axios\";\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products\");\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAILURE,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products/\" + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAILURE,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct };","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Projects/shopEt/frontend/src/actions/ProductActions.js"],"names":["PRODUCT_DETAILS_FAILURE","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAILURE","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","axios","listProducts","dispatch","type","data","get","payload","error","message","saveProduct","product","getState","PRODUCT_SAVE_REQUEST","userSignin","userInfo","_id","Axios","post","headers","token","PRODUCT_SAVE_SUCCESS","put","PRODUCT_SAVE_FAIL","detailsProduct","productId"],"mappings":"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","sourcesContent":["import {\r\n    PRODUCT_DETAILS_FAILURE,\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n  PRODUCT_LIST_FAILURE,\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n} from \"../constants/ProductConstants\";\r\nimport axios from \"axios\";\r\nconst listProducts = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_LIST_REQUEST });\r\n    const { data } = await axios.get(\"/api/products\");\r\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_LIST_FAILURE, payload: error.message });\r\n  }\r\n};\r\n\r\nconst saveProduct = (product) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\r\n    const { userSignin: { userInfo } } = getState();\r\n    if (!product._id) {\r\n      const { data } = await Axios.post('/api/products', product, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + userInfo.token\r\n        }\r\n      });\r\n      dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n    } else {\r\n      const { data } = await Axios.put('/api/products/' + product._id, product, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + userInfo.token\r\n        }\r\n      });\r\n      dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n    }\r\n\r\n  } catch (error) {\r\n\r\n    dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst detailsProduct = (productId) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_DETAILS_REQUEST, payload:productId });\r\n    const { data } = await axios.get(\"/api/products/\" + productId);\r\n    dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_DETAILS_FAILURE, payload: error.message });\r\n  }\r\n};\r\n\r\nexport { listProducts,detailsProduct };\r\n"]},"metadata":{},"sourceType":"module"}